FUNCTION  provider#clipboard#Call()
    Defined: /opt/homebrew/Cellar/neovim/0.11.1/share/nvim/runtime/autoload/provider/clipboard.vim:347
Called 1 time
Total time:   0.035007
 Self time:   0.000058

count  total (s)   self (s)
    1              0.000014   if get(s:, 'here', v:false)  " Clipboard provider must not recurse. #7184
                                return 0
    1              0.000002   endif
    1              0.000008   let s:here = v:true
    1              0.000002   try
    1   0.034968   0.000019     return call(s:clipboard[a:method],a:args,s:clipboard)
    1              0.000001   finally
    1              0.000002     let s:here = v:false
    1              0.000001   endtry

FUNCTION  3()
    Defined: /opt/homebrew/Cellar/neovim/0.11.1/share/nvim/runtime/autoload/provider/clipboard.vim:288
Called 1 time
Total time:   0.034949
 Self time:   0.000068

count  total (s)   self (s)
    1              0.000003   if a:reg == '"'
                                call s:clipboard.set(a:lines,a:regtype,'+')
                                if s:copy['*'] != s:copy['+']
                                  call s:clipboard.set(a:lines,a:regtype,'*')
                                end
                                return 0
    1              0.000001   end
                            
    1              0.000005   if type(s:copy[a:reg]) == v:t_func
                                call s:copy[a:reg](a:lines, a:regtype)
                                return 0
    1              0.000000   end
                            
    1              0.000002   if s:cache_enabled == 0
    1   0.034899   0.000017     call s:try_cmd(s:copy[a:reg], a:lines)
                                "Cache it anyway we can compare it later to get regtype of the yank
    1              0.000015     let s:selections[a:reg] = copy(s:selection)
    1              0.000003     let s:selections[a:reg].data = [a:lines, a:regtype]
    1              0.000001     return 0
                              end
                            
                              if s:selections[a:reg].owner > 0
                                let prev_job = s:selections[a:reg].owner
                              end
                              let s:selections[a:reg] = copy(s:selection)
                              let selection = s:selections[a:reg]
                              let selection.data = [a:lines, a:regtype]
                              let selection.argv = s:copy[a:reg]
                              let selection.detach = s:cache_enabled
                              let selection.cwd = "/"
                              let jobid = jobstart(selection.argv, selection)
                              if jobid > 0
                                call jobsend(jobid, a:lines)
                                call jobclose(jobid, 'stdin')
                                " xclip does not close stdout when receiving input via stdin
                                if selection.argv[0] ==# 'xclip'
                                  call jobclose(jobid, 'stdout')
                                endif
                                let selection.owner = jobid
                                let ret = 1
                              else
                                echohl WarningMsg
                                echomsg 'clipboard: failed to execute: '.(s:copy[a:reg])
                                echohl None
                                let ret = 1
                              endif
                            
                              " The previous provider instance should exit when the new one takes
                              " ownership, but kill it to be sure we don't fill up the job table.
                              if exists('prev_job')
                                call timer_start(1000, {... -> jobwait([prev_job], 0)[0] == -1 && jobstop(prev_job)})
                              endif
                            
                              return ret

FUNCTION  <SNR>30_Highlight_Matching_Pair()
    Defined: /opt/homebrew/Cellar/neovim/0.11.1/share/nvim/runtime/plugin/matchparen.vim:45
Called 81 times
Total time:   0.004358
 Self time:   0.003712

count  total (s)   self (s)
   81              0.000248   if !exists("w:matchparen_ids")
                                let w:matchparen_ids = []
   81              0.000073   endif
                              " Remove any previous match.
   81   0.000929   0.000284   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
   81              0.000226   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
   81              0.000018   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
   81              0.000142   let c_lnum = line('.')
   81              0.000104   let c_col = col('.')
   81              0.000041   let before = 0
                            
   81              0.000133   let text = getline(c_lnum)
   81              0.000279   let c_before = text->strpart(0, c_col - 1)->slice(-1)
   81              0.000163   let c = text->strpart(c_col - 1)->slice(0, 1)
   81              0.000886   let plist = split(&matchpairs, '.\zs[:,]')
   81              0.000167   let i = index(plist, c)
   81              0.000049   if i < 0
                                " not found, in Insert mode try character before the cursor
   81              0.000154     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
   81              0.000023     endif
   81              0.000045     if i < 0
                                  " not found, nothing to do
   81              0.000036       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let save_cursor = getcurpos()
                                call cursor(c_lnum, c_col - before)
                                defer setpos('.', save_cursor)
                              endif
                            
                              if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
                              elseif exists("b:ts_highlight") && &syntax != 'on'
                                let s_skip = "match(v:lua.vim.treesitter.get_captures_at_cursor(), '" .. 'string\|character\|singlequote\|escape\|symbol\|comment' .. "') != -1"
                              else
                                " do not attempt to match when the syntax item where the cursor is
                                " indicates there does not exist a matching parenthesis, e.g. for shells
                                " case statement: "case $var in foobar)"
                                "
                                " add the check behind a filetype check, so it only needs to be
                                " evaluated for certain filetypes
                                if ['sh']->index(&filetype) >= 0 && synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "shSnglCase"}) >= 0
                                  return
                                endif
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
                                let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
                                try
                                  execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
                                endtry
                              endif
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom
                                if !g:matchparen_disable_cursor_hl
                                  call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
                                else
                                  call add(w:matchparen_ids, matchaddpos('MatchParen', [[m_lnum, m_col]], 10))
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTION  <SNR>44_try_cmd()
    Defined: /opt/homebrew/Cellar/neovim/0.11.1/share/nvim/runtime/autoload/provider/clipboard.vim:38
Called 1 time
Total time:   0.034882
 Self time:   0.002709

count  total (s)   self (s)
    1   0.034843   0.002670   let out = systemlist(a:cmd, (a:0 ? a:1 : ['']), 1)
    1              0.000015   if v:shell_error
                                if !exists('s:did_error_try_cmd')
                                  echohl WarningMsg
                                  echomsg "clipboard: error: ".(len(out) ? out[0] : v:shell_error)
                                  echohl None
                                  let s:did_error_try_cmd = 1
                                endif
                                return 0
    1              0.000000   endif
    1              0.000001   return out

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: /opt/homebrew/Cellar/neovim/0.11.1/share/nvim/runtime/ftplugin.vim:15
Called 4 times
Total time:   0.007095
 Self time:   0.007095

count  total (s)   self (s)
    4              0.000020     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    4              0.000003     endif
                            
    4              0.000014     let s = expand("<amatch>")
    4              0.000004     if s != ""
    4              0.000014       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    4              0.000001       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
    8              0.000016       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    4              0.006975         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
    8              0.000007       endfor
    4              0.000002     endif

FUNCTION  <SNR>30_Remove_Matches()
    Defined: /opt/homebrew/Cellar/neovim/0.11.1/share/nvim/runtime/plugin/matchparen.vim:203
Called 81 times
Total time:   0.000646
 Self time:   0.000646

count  total (s)   self (s)
   81              0.000152   if exists('w:paren_hl_on') && w:paren_hl_on
                                while !empty(w:matchparen_ids)
                                  silent! call remove(w:matchparen_ids, 0)->matchdelete()
                                endwhile
                                let w:paren_hl_on = 0
   81              0.000019   endif

FUNCTION  blamer#Refresh()
    Defined: ~/.local/share/nvim/lazy/blamer.nvim/autoload/blamer.vim:331
Called 71 times
Total time:   0.000571
 Self time:   0.000571

count  total (s)   self (s)
   71              0.000369   if g:blamer_enabled == 0 || s:blamer_buffer_enabled == 0 || s:blamer_show_enabled == 0
   71              0.000081     return
                              endif
                            
                              call timer_stop(s:blamer_timer_id)
                              call blamer#Hide()
                              let s:blamer_timer_id = timer_start(s:blamer_delay, { tid -> blamer#Show() })

FUNCTION  <SNR>2_LoadIndent()
    Defined: /opt/homebrew/Cellar/neovim/0.11.1/share/nvim/runtime/indent.vim:14
Called 4 times
Total time:   0.001539
 Self time:   0.001539

count  total (s)   self (s)
    4              0.000007     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    4              0.000001     endif
    4              0.000007     let s = expand("<amatch>")
    4              0.000003     if s != ""
    4              0.000003       if exists("b:did_indent")
                            	unlet b:did_indent
    4              0.000001       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
    8              0.000012       for name in split(s, '\.')
                                    " XXX: "[.]" in the pattern makes it a wildcard on Windows
    4              0.001480         exe $'runtime! indent/{name}[.]{{vim,lua}}'
    8              0.000004       endfor
    4              0.000001     endif

FUNCTION  <SNR>43_SynSet()
    Defined: /opt/homebrew/Cellar/neovim/0.11.1/share/nvim/runtime/syntax/synload.vim:27
Called 4 times
Total time:   0.004463
 Self time:   0.004463

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    4              0.000009   syn clear
    4              0.000004   if exists("b:current_syntax")
                                unlet b:current_syntax
    4              0.000001   endif
                            
    4              0.000008   0verbose let s = expand("<amatch>")
    4              0.000002   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    4              0.000002   elseif s == "OFF"
                                let s = ""
    4              0.000001   endif
                            
    4              0.000002   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
    8              0.000010     for name in split(s, '\.')
    4              0.000004       if !empty(name)
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    4              0.004380         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
    4              0.000003       endif
    8              0.000003     endfor
    4              0.000001   endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
    1   0.035007   0.000058  provider#clipboard#Call()
    1   0.034949   0.000068  3()
    1   0.034882   0.002709  <SNR>44_try_cmd()
    4   0.007095             <SNR>1_LoadFTPlugin()
    4   0.004463             <SNR>43_SynSet()
   81   0.004358   0.003712  <SNR>30_Highlight_Matching_Pair()
    4   0.001539             <SNR>2_LoadIndent()
   81   0.000646             <SNR>30_Remove_Matches()
   71   0.000571             blamer#Refresh()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
    4              0.007095  <SNR>1_LoadFTPlugin()
    4              0.004463  <SNR>43_SynSet()
   81   0.004358   0.003712  <SNR>30_Highlight_Matching_Pair()
    1   0.034882   0.002709  <SNR>44_try_cmd()
    4              0.001539  <SNR>2_LoadIndent()
   81              0.000646  <SNR>30_Remove_Matches()
   71              0.000571  blamer#Refresh()
    1   0.034949   0.000068  3()
    1   0.035007   0.000058  provider#clipboard#Call()

